# `nitpick` specific configuration.
# `nitpick` ensures that you have the same configuration
# in your own project.

# Make sure to install it with:
# `pip install nitpick`

["setup.cfg".mypy]
# No untyped functions. Everything must be typed including returns.
disallow_untyped_defs = true

# Follow imports for type information but do not raise an error unless
# the file is explicitly type checked
# Valid values:skip/silent/normal/error.
follow_imports = "silent"

# Untyped imports are not imported as Any
disallow_any_unimported = true

# Allow imports to be untyped
# Phase 2: Once we have typed enough we will set to False and start requiring our 3rd party types to have types
ignore_missing_imports = true

# Untyped decorators will make a function untyped. This enforces decorators to be typed correctly.
disallow_untyped_decorators = true
disallow_untyped_calls = true

# Ensure even untyped functions are type checked
check_untyped_defs = true

strict_optional = true
strict_equality = true

# This disallows automatic reexporting after importing a module.
implicit_reexport = true

# We have to specify `Optional`
no_implicit_optional = true

# We want to see the error code
show_error_codes = true

# Warnings
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true
warn_return_any = true


###### Precommits

## RUFF
[[".pre-commit-config.yaml".repos]]
repo = "https://github.com/charliermarsh/ruff-pre-commit"
rev = "latest"

[[".pre-commit-config.yaml".repos.hooks]]
id = "ruff"
args = ["--fix"]

# F401 Remove unused imports
[[".pre-commit-config.yaml".repos]]
repo = "https://github.com/charliermarsh/ruff-pre-commit"
rev = "latest"

[[".pre-commit-config.yaml".repos.hooks]]
id = "ruff-format"


# Commitizen
[[".pre-commit-config.yaml".repos]]
repo = "https://github.com/commitizen-tools/commitizen"

[[".pre-commit-config.yaml".repos.hooks]]
id = "commitizen"

# MYPY
[[".pre-commit-config.yaml".repos]]
repo = "local"

[[".pre-commit-config.yaml".repos.hooks]]
id = "mypy"
args = ["--show-error-codes"]
name = "mypy"
entry = "poetry run mypy"
require_serial = true
language = "system"
types = ["python"]



["ruff.toml"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.8
target-version = "py310"

["ruff.toml".lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "W", "C901"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

["ruff.toml".format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"